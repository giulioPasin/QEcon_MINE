#Problem 1: Iterative Solver for Nonlinear Equations
function iterative_solver(f, x0, α; ϵ = 1e-6, maxiter = 1000)
    g(x) = f(x) + x
    xs = Float64[x0] # Array of guesses (force Float64)
    residuals = Float64[] # Array of residuals

    for i in 1:maxiter
        x_next = (1 - α) * g(xs[end]) + α * xs[end]
        residual = abs(x_next - xs[end])
        push!(xs, x_next)
        push!(residuals, residual)

        # Check for convergence
        if residual / (1 + abs(xs[end])) < ϵ
            return (0, x_next, f(x_next), abs(x_next - g(x_next)), xs, residuals)
        end
    end

    # If no convergence within max iterations
    return (1, NaN, NaN, NaN, xs, residuals)
end

# Define the function f
f(x) = (x + 1)^(1/3) - x

# Test the solver
result = iterative_solver(f, 1.0, 0.5)
println("Convergence Flag: ", result[1])
println("Solution: ", result[2])
println("Function Value at Solution: ", result[3])
println("Residual: ", result[4])
println("All Iterates: ", result[5])
println("Residuals: ", result[6])


#Problem2 Linear Algebra
using LinearAlgebra

# Part 1: Exact solution
function solve_exact(α, β)
    x5 = 1
    x4 = x5 + β
    x3 = x4
    x2 = x3
    x1 = α + β * (x4 - x5)
    return [x1, x2, x3, x4, x5]
end

# Part 2: Using the backslash operator
function solve_system(α, β)
    A = [1 -1  0   α-β β;
         0  1 -1    0  0;
         0  0  1   -1  0;
         0  0  0    1 -1;
         0  0  0    0  1]
    b = [α; 0; 0; 0; 1]
    exact = solve_exact(α, β)
    backslash_sol = A \ b
    residual = norm(A * backslash_sol - b) / norm(b)
    condition_number = cond(A)
    return (exact, backslash_sol, residual, condition_number)
end

# Part 3: Table
for β in [1, 10, 100, 10^12]
    println(solve_system(0.1, β))
end



#Problem3:  Internal Rate of Return
# Install the Roots package (only if not already installed)
import Pkg; Pkg.add("Roots")

# Import the package
using Roots

# Part 1: NPV Function
function NPV(r, C)
    # Calculate Net Present Value given discount rate r and cash flows C
    return sum(C[t+1] / (1 + r)^t for t in 0:(length(C) - 1))
end

# Part 2 & 3: IRR Calculation Function
function internal_rate(C)
    # Check for valid input (cash flows must include both inflows and outflows)
    if all(C .>= 0) || all(C .<= 0)
        return "Root does not exist. Cash flows must include both inflows and outflows."
    end

    # Define the root-finding problem
    try
        irr = find_zero(r -> NPV(r, C), (0.0, 1.0)) # Search for IRR between 0 and 1
        return irr
    catch e
        return "Solver failed to converge. Error: $(e)"
    end
end

# Example Usage
cash_flows = [-5, 0, 0, 2.5, 5] # Example cash flows
irr = internal_rate(cash_flows)
println("Internal Rate of Return (IRR): ", irr)




#Problem 4 :
using Pkg
Pkg.add("Optim")
Pkg.add("Plots")

using Optim
using Plots

# CES Production Function
function ces_production(x1, x2, α, σ)
    return (α * x1^((σ - 1) / σ) + (1 - α) * x2^((σ - 1) / σ))^(σ / (σ - 1))
end

# Contour plot for CES production function
function plot_production_contour(α, σ_values)
    x1 = range(0.1, 5, length=50)  # Input range for x1
    x2 = range(0.1, 5, length=50)  # Input range for x2

    # Create contour plots for each value of σ
    plot_layout = @layout [a b c]  # Arrange plots side by side
    plots = []
    for σ in σ_values
        z = [ces_production(x, y, α, σ) for x in x1, y in x2]
        push!(plots, contour(x1, x2, z, xlabel="x1", ylabel="x2", title="Production Contour σ=$σ"))
    end
    plot(plots..., layout=plot_layout, size=(1200, 400))
end

# Combined objective with penalty for constraint
function combined_cost(x, w1, w2, α, σ, y, λ=1e6)
    cost = w1 * x[1] + w2 * x[2]
    penalty = λ * (ces_production(x[1], x[2], α, σ) - y)^2  # Penalize constraint violations
    return cost + penalty
end

# Cost function optimization
function minimize_cost(α, σ, w1, w2, y)
    # Bounds and initial guess
    lower_bounds = [0.0, 0.0]  # Non-negativity constraints
    x0 = [1.0, 1.0]  # Initial guess

    # Perform optimization
    result = optimize(
        x -> combined_cost(x, w1, w2, α, σ, y),  # Ensure function is properly passed
        lower_bounds,  # Lower bounds on x1, x2
        x0,  # Initial guess
        LBFGS()  # Optimization method
    )

    # Return cost, x1, x2
    return (result.minimum, result.minimizer[1], result.minimizer[2])
end

# Plot cost and input demand
function plot_cost_and_inputs()
    w1_vals = range(0.1, 10, length=50)  # Range of w1 values
    σ_values = [0.25, 1, 4]  # Values of σ
    α = 0.5
    y = 1  # Production target
    w2 = 1  # Fixed input price for x2

    # Create dictionaries to store results
    costs = Dict()
    x1_results = Dict()
    x2_results = Dict()

    for σ in σ_values
        costs["σ=$σ"] = []
        x1_results["σ=$σ"] = []
        x2_results["σ=$σ"] = []

        for w1 in w1_vals
            cost, x1, x2 = minimize_cost(α, σ, w1, w2, y)
            push!(costs["σ=$σ"], cost)
            push!(x1_results["σ=$σ"], x1)
            push!(x2_results["σ=$σ"], x2)
        end
    
    end

    # Plot results
    # Cost Function
    p1 = plot(w1_vals, costs["σ=0.25"], label="σ=0.25", xlabel="w1", ylabel="Cost", title="Cost Function")
    plot!(p1, w1_vals, costs["σ=1"], label="σ=1")
    plot!(p1, w1_vals, costs["σ=4"], label="σ=4")

    # Input Demand x1
    p2 = plot(w1_vals, x1_results["σ=0.25"], label="σ=0.25", xlabel="w1", ylabel="x1", title="Input Demand x1")
    plot!(p2, w1_vals, x1_results["σ=1"], label="σ=1")
    plot!(p2, w1_vals, x1_results["σ=4"], label="σ=4")

    # Input Demand x2
    p3 = plot(w1_vals, x2_results["σ=0.25"], label="σ=0.25", xlabel="w1", ylabel="x2", title="Input Demand x2")
    plot!(p3, w1_vals, x2_results["σ=1"], label="σ=1")
    plot!(p3, w1_vals, x2_results["σ=4"], label="σ=4")

    # Combine all plots into a single layout
    plot(p1, p2, p3, layout=grid(3, 1), size=(800, 800))
end

# Main Script Execution
# Step 1: Contour plot of the production function
println("Generating contour plots for production function...")
plot_production_contour(0.5, [0.25, 1, 4])

# Step 2: Plot cost and input demand
println("Generating cost and input demand plots...")
plot_cost_and_inputs()

