#Problem 1: Iterative Solver for Nonlinear Equations
function iterative_solver(f, x0, α; ϵ = 1e-6, maxiter = 1000)
    g(x) = f(x) + x
    xs = Float64[x0] # Array of guesses (force Float64)
    residuals = Float64[] # Array of residuals

    for i in 1:maxiter
        x_next = (1 - α) * g(xs[end]) + α * xs[end]
        residual = abs(x_next - xs[end])
        push!(xs, x_next)
        push!(residuals, residual)

        # Check convergence
        if residual / (1 + abs(xs[end])) < ϵ
            return (0, x_next, f(x_next), abs(x_next - g(x_next)), xs, residuals)
        end
    end

    # If no convergence
    return (1, NaN, NaN, NaN, xs, residuals)
end

# function f
f(x) = (x + 1)^(1/3) - x

# Test 
result = iterative_solver(f, 1.0, 0.5)
println("Convergence Flag: ", result[1])
println("Solution: ", result[2])
println("Function Value at Solution: ", result[3])
println("Residual: ", result[4])
println("All Iterates: ", result[5])
println("Residuals: ", result[6])


#Problem2: Linear Algebra
using LinearAlgebra


function solve_exact(α, β)
    x5 = 1
    x4 = x5 + β
    x3 = x4
    x2 = x3
    x1 = α + β * (x4 - x5)
    return [x1, x2, x3, x4, x5]
end

#  Using the backslash operator
function solve_system(α, β)
    A = [1 -1  0   α-β β;
         0  1 -1    0  0;
         0  0  1   -1  0;
         0  0  0    1 -1;
         0  0  0    0  1]
    b = [α; 0; 0; 0; 1]
    exact = solve_exact(α, β)
    backslash_sol = A \ b
    residual = norm(A * backslash_sol - b) / norm(b)
    condition_number = cond(A)
    return (exact, backslash_sol, residual, condition_number)
end

# Table
for β in [1, 10, 100, 10^12]
    println(solve_system(0.1, β))
end



#Problem3:  Internal Rate of Return

import Pkg; Pkg.add("Roots")


using Roots

#  NPV Function
function NPV(r, C)
    # Calculate Net Present Value given discount rate r and cash flows C
    return sum(C[t+1] / (1 + r)^t for t in 0:(length(C) - 1))
end

#  IRR Calculation Function
function internal_rate(C)
    # Check for valid input (cash flows must include both inflows and outflows)
    if all(C .>= 0) || all(C .<= 0)
        return "Root does not exist. Cash flows must include both inflows and outflows."
    end

    #  root-finding problem
    try
        irr = find_zero(r -> NPV(r, C), (0.0, 1.0)) # Search for IRR between 0 and 1
        return irr
    catch e
        return "Solver failed to converge. Error: $(e)"
    end
end

# Example
cash_flows = [-5, 0, 0, 2.5, 5] # Example cash flows
irr = internal_rate(cash_flows)
println("Internal Rate of Return (IRR): ", irr)




#Problem 4 :
using Pkg
Pkg.add("Plots")
Pkg.add("JuMP")
Pkg.add("Ipopt")

using Plots
using JuMP
using Optim
using LinearAlgebra
using Ipopt
# CES prod f.
function ces_production(x1, x2, α, σ)
    if σ == 1
        return x1^α * x2^(1 - α)   
    else
        return ((α * x1^((σ - 1) / σ)) + ((1 - α) * x2^((σ - 1) / σ)))^(σ / (σ - 1))
    end
end

# minimization cost function
function minimize_cost(α, σ, w1, w2, y)
    model = Model(optimizer_with_attributes(Ipopt.Optimizer, "print_level" => 0))

    #  x1 and x2
    @variable(model, x1 >= 0)
    @variable(model, x2 >= 0)

    #  Minimize cost
    @objective(model, Min, w1 * x1 + w2 * x2)

    #  Production target
    if σ == 1
        @constraint(model, x1^α * x2^(1 - α) == y)
    else
        @constraint(model, ((α * x1^((σ - 1) / σ)) + ((1 - α) * x2^((σ - 1) / σ)))^(σ / (σ - 1)) == y)
    end

    # optimization problem
    optimize!(model)

    
    cost = objective_value(model)
    x1_opt = value(x1)
    x2_opt = value(x2)
    return cost, x1_opt, x2_opt
end

# Plots for xost and input demand functions
function plot_cost_and_inputs(α, σ_values, w1_range, w2, y)
    costs = []
    x1_vals = []
    x2_vals = []

    for σ in σ_values
        cost_σ = []
        x1_σ = []
        x2_σ = []
        for w1 in w1_range
            cost, x1, x2 = minimize_cost(α, σ, w1, w2, y)
            push!(cost_σ, cost)
            push!(x1_σ, x1)
            push!(x2_σ, x2)
        end
        push!(costs, cost_σ)
        push!(x1_vals, x1_σ)
        push!(x2_vals, x2_σ)
    end

    # Plot
    plot(w1_range, costs[1], label = "σ = $(σ_values[1])", title = "Cost Function", xlabel = "w1", ylabel = "Cost")
    plot!(w1_range, costs[2], label = "σ = $(σ_values[2])")
    plot!(w1_range, costs[3], label = "σ = $(σ_values[3])")
    savefig("cost_function.png")

    plot(w1_range, x1_vals[1], label = "σ = $(σ_values[1])", title = "Input x1 Demand", xlabel = "w1", ylabel = "x1")
    plot!(w1_range, x1_vals[2], label = "σ = $(σ_values[2])")
    plot!(w1_range, x1_vals[3], label = "σ = $(σ_values[3])")
    savefig("x1_demand.png")

    plot(w1_range, x2_vals[1], label = "σ = $(σ_values[1])", title = "Input x2 Demand", xlabel = "w1", ylabel = "x2")
    plot!(w1_range, x2_vals[2], label = "σ = $(σ_values[2])")
    plot!(w1_range, x2_vals[3], label = "σ = $(σ_values[3])")
    savefig("x2_demand.png")
end

# Parameters
α = 0.5
σ_values = [0.25, 1, 4]
w1_range = 0.1:0.1:10
w2 = 1
y = 1

# rrun function
plot_cost_and_inputs(α, σ_values, w1_range, w2, y)
