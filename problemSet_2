#Problem 1: Iterative Solver for Nonlinear Equations
function iterative_solver(f, x0, α; ϵ = 1e-6, maxiter = 1000)
    g(x) = f(x) + x
    xs = Float64[x0] # Array of guesses (force Float64)
    residuals = Float64[] # Array of residuals

    for i in 1:maxiter
        x_next = (1 - α) * g(xs[end]) + α * xs[end]
        residual = abs(x_next - xs[end])
        push!(xs, x_next)
        push!(residuals, residual)

        # Check for convergence
        if residual / (1 + abs(xs[end])) < ϵ
            return (0, x_next, f(x_next), abs(x_next - g(x_next)), xs, residuals)
        end
    end

    # If no convergence within max iterations
    return (1, NaN, NaN, NaN, xs, residuals)
end

# Define the function f
f(x) = (x + 1)^(1/3) - x

# Test the solver
result = iterative_solver(f, 1.0, 0.5)
println("Convergence Flag: ", result[1])
println("Solution: ", result[2])
println("Function Value at Solution: ", result[3])
println("Residual: ", result[4])
println("All Iterates: ", result[5])
println("Residuals: ", result[6])


#Problem2 Linear Algebra
using LinearAlgebra

# Part 1: Exact solution
function solve_exact(α, β)
    x5 = 1
    x4 = x5 + β
    x3 = x4
    x2 = x3
    x1 = α + β * (x4 - x5)
    return [x1, x2, x3, x4, x5]
end

# Part 2: Using the backslash operator
function solve_system(α, β)
    A = [1 -1  0   α-β β;
         0  1 -1    0  0;
         0  0  1   -1  0;
         0  0  0    1 -1;
         0  0  0    0  1]
    b = [α; 0; 0; 0; 1]
    exact = solve_exact(α, β)
    backslash_sol = A \ b
    residual = norm(A * backslash_sol - b) / norm(b)
    condition_number = cond(A)
    return (exact, backslash_sol, residual, condition_number)
end

# Part 3: Table
for β in [1, 10, 100, 10^12]
    println(solve_system(0.1, β))
end



#Problem3:  Internal Rate of Return
# Install the Roots package (only if not already installed)
import Pkg; Pkg.add("Roots")

# Import the package
using Roots

# Part 1: NPV Function
function NPV(r, C)
    # Calculate Net Present Value given discount rate r and cash flows C
    return sum(C[t+1] / (1 + r)^t for t in 0:(length(C) - 1))
end

# Part 2 & 3: IRR Calculation Function
function internal_rate(C)
    # Check for valid input (cash flows must include both inflows and outflows)
    if all(C .>= 0) || all(C .<= 0)
        return "Root does not exist. Cash flows must include both inflows and outflows."
    end

    # Define the root-finding problem
    try
        irr = find_zero(r -> NPV(r, C), (0.0, 1.0)) # Search for IRR between 0 and 1
        return irr
    catch e
        return "Solver failed to converge. Error: $(e)"
    end
end

# Example Usage
cash_flows = [-5, 0, 0, 2.5, 5] # Example cash flows
irr = internal_rate(cash_flows)
println("Internal Rate of Return (IRR): ", irr)




#Problem 4 :
